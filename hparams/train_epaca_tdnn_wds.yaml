#   ###############################
# Model: language identification with ECAPA
# Authors: Tanel ALum√§e
# ################################

# Basic parameters
seed: 1987
__set_seed: !apply:torch.manual_seed [!ref <seed>]
output_folder: !ref results/epaca_tdnn_wds_1f/<seed>
save_folder: !ref <output_folder>/save
train_log: !ref <output_folder>/train_log.txt
data_folder: ./


#data_base_url: /state/partition1/tanel.alumae/data/voxlingua107_shards
data_base_url: http://bark.phon.ioc.ee/lw/korpused/voxlingua107/shards/
train_meta: !ref <data_base_url>/train/meta.json
val_meta: !ref <data_base_url>/dev/meta.json
train_shards: !ref <data_base_url>/train/shard-{000000..000507}.tar
#train_shards: !ref <data_base_url>/dev/shard-000000.tar
val_shards: !ref <data_base_url>/dev/shard-000000.tar

shard_cache_dir: .cache

skip_prep: False
ckpt_interval_minutes: -1 # Intra-epoch checkpoints are not yet supported with WebDataset

# Training parameters
number_of_epochs: 30
batch_size: 128
lr: 0.0001
lr_final: 0.00001
base_lr: 0.00000001
max_lr: !ref <lr>
step_size: 65000
sample_rate: 16000
sentence_len: 3 # seconds
shuffle: False
random_chunk: True

# Feature parameters
n_mels: 60
left_frames: 0
right_frames: 0
deltas: False

# Number of speakers
out_n_neurons: 107

train_dataloader_options:
    batch_size: !ref <batch_size>
    shuffle: !ref <shuffle>
    num_workers: 4

val_dataloader_options:
    # smaller batch size, since we use full-length segments for validation
    batch_size: 32
    shuffle: False
    num_workers: 1

# Functions
compute_features: !new:speechbrain.lobes.features.Fbank
    n_mels: !ref <n_mels>
    left_frames: !ref <left_frames>
    right_frames: !ref <right_frames>
    deltas: !ref <deltas>

embedding_model: !new:speechbrain.lobes.models.ECAPA_TDNN.ECAPA_TDNN
    input_size: !ref <n_mels>
    channels: [1024, 1024, 1024, 1024, 3072]
    kernel_sizes: [5, 3, 3, 3, 1]
    dilations: [1, 2, 3, 4, 1]
    attention_channels: 128
    lin_neurons: 256

classifier: !new:speechbrain.lobes.models.ECAPA_TDNN.Classifier
    input_size: 256
    out_neurons: !ref <out_n_neurons>

epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
    limit: !ref <number_of_epochs>



augment_speed: !new:speechbrain.lobes.augment.TimeDomainSpecAugment
    sample_rate: !ref <sample_rate>
    speeds: [90, 100, 110]


add_rev_noise: !new:speechbrain.lobes.augment.EnvCorrupt
    openrir_folder: !ref <data_folder>
    openrir_max_noise_len: 3.0  # seconds
    reverb_prob: 0.5
    noise_prob: 0.8
    noise_snr_low: 0
    noise_snr_high: 15
    rir_scale_factor: 1.0

# Definition of the augmentation pipeline.
# If concat_augment = False, the augmentation techniques are applied
# in sequence. If concat_augment = True, all the augmented signals
# # are concatenated in a single big batch.

augment_pipeline: [
    !ref <augment_speed>,
    !ref <add_rev_noise>
]

concat_augment: False

mean_var_norm: !new:speechbrain.processing.features.InputNormalization
    norm_type: sentence
    std_norm: False

modules:
    compute_features: !ref <compute_features>
    augment_speed: !ref <augment_speed>
    add_rev_noise: !ref <add_rev_noise>
    embedding_model: !ref <embedding_model>
    classifier: !ref <classifier>
    mean_var_norm: !ref <mean_var_norm>

compute_cost: !new:speechbrain.nnet.losses.LogSoftmaxWrapper
    loss_fn: !new:speechbrain.nnet.losses.AdditiveAngularMargin
        margin: 0.2
        scale: 30

compute_error: !name:speechbrain.nnet.losses.classification_error

opt_class: !name:torch.optim.Adam
    lr: !ref <lr>
    weight_decay: 0.000002

lr_annealing: !new:speechbrain.nnet.schedulers.LinearScheduler
    initial_value: !ref <lr>
    final_value: !ref <lr_final>
    epoch_count: !ref <number_of_epochs>

# Logging + checkpoints
train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
    save_file: !ref <train_log>

error_stats: !name:speechbrain.utils.metric_stats.MetricStats
    metric: !name:speechbrain.nnet.losses.classification_error
        reduction: batch

checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
    checkpoints_dir: !ref <save_folder>
    recoverables:
        embedding_model: !ref <embedding_model>
        classifier: !ref <classifier>
        normalizer: !ref <mean_var_norm>
        counter: !ref <epoch_counter>
